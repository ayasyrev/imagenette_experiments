# AUTOGENERATED! DO NOT EDIT! File to edit: Nbs_dev/02_consistency.ipynb (unless otherwise specified).

__all__ = ['SEED_N', 'prepare_cudnn', 'set_global_seed', 'set_consistance']

# Cell
# hide
import torch, random
import numpy as np

# Cell
# hide
SEED_N = 2020

# Cell
# export

# Copyed from Catalist fraimwork.
# TODO find url to source.
def prepare_cudnn(deterministic: bool = None, benchmark: bool = None) -> None:
    """
    Prepares CuDNN benchmark and sets CuDNN
    to be deterministic/non-deterministic mode
    Args:
        deterministic (bool): deterministic mode if running in CuDNN backend.
        benchmark (bool): If ``True`` use CuDNN heuristics to figure out
            which algorithm will be most performant
            for your model architecture and input.
            Setting it to ``False`` may slow down your training.
    """
    if torch.cuda.is_available():
        # CuDNN reproducibility
        # https://pytorch.org/docs/stable/notes/randomness.html#cudnn
        if deterministic is None:
            import os
            deterministic = \
                os.environ.get("CUDNN_DETERMINISTIC", "False") == "True"
        torch.backends.cudnn.deterministic = deterministic

        # https://discuss.pytorch.org/t/how-should-i-disable-using-cudnn-in-my-code/38053/4
        if benchmark is None:
            import os
            benchmark = os.environ.get("CUDNN_BENCHMARK", "True") == "True"
        torch.backends.cudnn.benchmark = benchmark

# Cell
# export
# benchmark = False
# deterministic = True
torch.set_printoptions(precision=10)

# Cell
# export
def set_global_seed(seed: int) -> None:
    """
    Sets random seed into PyTorch, TensorFlow, Numpy and Random
    Args: seed: random seed
    """
    try:
        import torch
    except ImportError:
        pass
    else:
        torch.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)
    random.seed(seed)
    np.random.seed(seed)

# Cell
# export
def set_consistance(SEED_N=SEED_N):
    print(f"Set consistance..... seed {SEED_N}")
    set_global_seed(SEED_N)
    prepare_cudnn()